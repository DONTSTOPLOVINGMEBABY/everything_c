Streams	  | 
-----------

		- A stream is a uniform abstraction for communicating with files and devices that consume or produce sequential data such as sockets, keyboards, USB ports, and printers. 


		- A FILE object holds the internal state information for the connection to the associated file, including the file position indicator, buffering information, an error indicator, and an end-of-file indicator. 

		- C Standard Library functions operate on objects of type FILE * (a pointer to the FILE type). As a result, streams are frequently referred to as file pointers. 



		Buffering
	-------------------------

			- Buffering is the process of temporarily storing data in the main memory that's passing between a process and a device or file. 
				- Buffering improves the throughoutput of I/O operations, which often have high latencies. Similarly, when a program requests to write to block-oriented devices like disks, the driver can cache the data in memory until it has accumulated enough data for one or more device blocks, at which point it writes the data all at once to the disk, improving throughput. This strategy is called flushing the output buffer. 


			- A stream can be in one of three states:

				1. Unbuffered -- Characters are intended to appear from the source or at the destination as soon as posible. Streams used for error reporting or logging might be unbuffered. 

				2. Fully buffered -- Characters are intended to be transmitted to or from the host environment as a block when a buffer is filled. Streams used for file I/O are normally buffered to optimize throughput. 

				3. Line buffered -- Characters are intended to be transmitted to or from the host environments as a block when a newline character is encountered. Streams connected to ineractive devices such as terminals are line-buffered when you open them. 




	Predefined Streams
	------------------

		- A program will have three predefined text streams open and available for use on startup which are declared in <stdio.h>.
			
			1. extern FILE * stdin  ; // standard input stream   	||  NOT Fully buffered 
			2. extern FILE * stdin  ; // standard output stream	||  Fully Buffered
			3. extern FILE * stderr ; // standard error stream	||  Fully Buffered 



	Stream Orientation
	------------------

		- Every stream has an orientation that indicates whether the stream contains narrow or wide characters. After a stream is associated with an external file, but before any operations are performed on it, the stream doesn't have an orientation. 

			1. Wide Oriented Stream
		
			2. Byte Oriented Stream 
				- Multibyte character sequences or narrow characters that can be represented as an object of type char (that are required by the C Standard to be 1 byte) can be written to a byte oriented stream  


		- You can reset the orientation of a stream by using the fwide function or by closing and then reopening the file. 

		- All three predefined streams (STDIN, STDERR, STDOUT) are unoriented at program startup.   



	Text and Binary Streams 
	-----------------------


		- C supports both text and binary streams. 

			- A text stream is an ordered sequence of characters composed into lines, each of which consists of zero or more characters plus a terminating newline character sequence. 

			- A binary stream is an ordered sequence of arbitrary binary
	Text and Binary Streams 
	-----------------------


		- C supports both text and binary streams. 

			- A text stream is an ordered sequence of characters composed into lines, each of which consists of zero or more characters plus a terminating newline character sequence. 

			- A binary stream is an ordered sequence of arbitrary binary data. Data read in from a binary stream will be the same as data written out earlier to that same stream, under the same implementation. 

		- Single line breaks are denoted with a \n on Unix like systems. Most Microsoft Windows programs use a carriage return \r followed by a newline feed \n






						------------------------------
						| Opening and Creating Files |
						------------------------------



fopen function
---------------


	- The fopen function opens the file whose name is given as a string and pointed to by filename, and then associates a stream with it. If the file doesn't already exist, fopen will create it. 

	- The mode argument determines how to open the file. 

		FILE *fopen(
			const char * restrict filename;  
			const char * restrict mode 
	} ; 


	Valid File Mode Strings
		1. r - Open existing text file for reading (will fail if file doesn't exist or doesn't have read access) 
		2. w - truncate to zero length or create text file for writing. 
		3. a - Append, open, or create text file for writing at end-of-file (all writes occur at current end of file)  
		4. rb - Open existing binary file for reading 
		5. wb - Truncate file to zero length or create binary file for writing
		6. ab- Append, open, or create binary file for writing at end-of-file 
		7. r+ - Open existing text file for reading and writing
		8. w+ - Truncate to zero length or create text file for reading and writing
		9. a+ - Append; open or create text file for update, writing at current end-of-file
		10. r+b or rb+ - Open existing binary file for update (reading and writing) 
		11. w+b or wb+ - Truncate to zero length or create binary file for reading and writing
		12. a+b or ab+ - Append; open or create binary file for update, writing at current end-of-file 

	


































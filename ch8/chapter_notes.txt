									| Streams | 
									-----------

		- A stream is a uniform abstraction for communicating with files and devices that consume or produce sequential data such as sockets, keyboards, USB ports, and printers. 


		- A FILE object holds the internal state information for the connection to the associated file, including the file position indicator, buffering information, an error indicator, and an end-of-file indicator. 

		- C Standard Library functions operate on objects of type FILE * (a pointer to the FILE type). As a result, streams are frequently referred to as file pointers. 



		Buffering
	-------------------------

			- Buffering is the process of temporarily storing data in the main memory that's passing between a process and a device or file. 
				- Buffering improves the throughoutput of I/O operations, which often have high latencies. Similarly, when a program requests to write to block-oriented devices like disks, the driver can cache the data in memory until it has accumulated enough data for one or more device blocks, at which point it writes the data all at once to the disk, improving throughput. This strategy is called flushing the output buffer. 


			- A stream can be in one of three states:

				1. Unbuffered -- Characters are intended to appear from the source or at the destination as soon as posible. Streams used for error reporting or logging might be unbuffered. 

				2. Fully buffered -- Characters are intended to be transmitted to or from the host environment as a block when a buffer is filled. Streams used for file I/O are normally buffered to optimize throughput. 

				3. Line buffered -- Characters are intended to be transmitted to or from the host environments as a block when a newline character is encountered. Streams connected to ineractive devices such as terminals are line-buffered when you open them. 




	Predefined Streams
	------------------

		- A program will have three predefined text streams open and available for use on startup which are declared in <stdio.h>.
			
			1. extern FILE * stdin  ; // standard input stream   	||  NOT Fully buffered 
			2. extern FILE * stdin  ; // standard output stream	||  Fully Buffered
			3. extern FILE * stderr ; // standard error stream	||  Fully Buffered 



	Stream Orientation
	------------------

		- Every stream has an orientation that indicates whether the stream contains narrow or wide characters. After a stream is associated with an external file, but before any operations are performed on it, the stream doesn't have an orientation. 

			1. Wide Oriented Stream
		
			2. Byte Oriented Stream 
				- Multibyte character sequences or narrow characters that can be represented as an object of type char (that are required by the C Standard to be 1 byte) can be written to a byte oriented stream  


		- You can reset the orientation of a stream by using the fwide function or by closing and then reopening the file. 

		- All three predefined streams (STDIN, STDERR, STDOUT) are unoriented at program startup.   



	Text and Binary Streams 
	-----------------------


		- C supports both text and binary streams. 

			- A text stream is an ordered sequence of characters composed into lines, each of which consists of zero or more characters plus a terminating newline character sequence. 

			- A binary stream is an ordered sequence of arbitrary binary
	Text and Binary Streams 
	-----------------------


		- C supports both text and binary streams. 

			- A text stream is an ordered sequence of characters composed into lines, each of which consists of zero or more characters plus a terminating newline character sequence. 

			- A binary stream is an ordered sequence of arbitrary binary data. Data read in from a binary stream will be the same as data written out earlier to that same stream, under the same implementation. 

		- Single line breaks are denoted with a \n on Unix like systems. Most Microsoft Windows programs use a carriage return \r followed by a newline feed \n






						------------------------------
						| Opening and Creating Files |
						------------------------------



fopen function
---------------


	- The fopen function opens the file whose name is given as a string and pointed to by filename, and then associates a stream with it. If the file doesn't already exist, fopen will create it. 

	- The mode argument determines how to open the file. 

		FILE *fopen(
			const char * restrict filename;  
			const char * restrict mode 
	} ; 


	Valid File Mode Strings
		1. r - Open existing text file for reading (will fail if file doesn't exist or doesn't have read access) 
		2. w - truncate to zero length or create text file for writing. 
		3. a - Append, open, or create text file for writing at end-of-file (all writes occur at current end of file)  
		4. rb - Open existing binary file for reading 
		5. wb - Truncate file to zero length or create binary file for writing
		6. ab- Append, open, or create binary file for writing at end-of-file 
		7. r+ - Open existing text file for reading and writing
		8. w+ - Truncate to zero length or create text file for reading and writing
		9. a+ - Append; open or create text file for update, writing at current end-of-file
		10. r+b or rb+ - Open existing binary file for update (reading and writing) 
		11. w+b or wb+ - Truncate to zero length or create binary file for reading and writing
		12. a+b or ab+ - Append; open or create binary file for update, writing at current end-of-file 

	



POSIX open Function
-------------------

	int open(const char *path, int oflag, ...) ; 


	- POSIX systems uses the open function to establish the connection between a file identified by path and a value called a file descriptor. 
	
		- File descriptor -- A non-negative integer that refers to the structure representing the file (called the open file description). The file descriptor returned by the open function is the smallest integer not yet returned by a prior call to open or passed to close and is unique to the calling process. 

		- The file descriptor is used by other I/O functions that refer to that file

		- The open function sets the offset used to mark the current position within the file to the beginning of the file. 


	- The value of the oflag parameter sets the open file descriptions file access modes (these specify whether the file is being opened for reading or writing or both). Values for oflag are constructed using bitwise-inclusive OR of a file access modes and any combination of access flags. 

		1. O_EXEC (open for execute only and must be nondirectory) 
		2. O_RDONLY (open for reading only) 
		3. O_RDWR (open for reading and writing) 
		4. O_SEARCH (open directory for search only) 
		5. O_WRONLY (open for writing only) 
	
		- Applications must specify one of the following file access mode in the value of oflag. 


	- File status flags control the behavior of the open function and affect how file operations are performed. The oflag parameters also set the file status flags. 

		1. O_APPEND (sets the file offset to the end of the file prior to each write)  
		2. O_TRUNC (truncates the length to 0) 
		3. O_CREAT (creates a file) 
		4. O_EXCL (causes the open to fail if O_CREAT is also set and the file exists)



	- Mode flags decide the properties of the file should it be created as part of the openening process. 


		1. S_IRUSR -- Read permission bit for the owner of the file
		2. S_IWUSR -- Write permission bit for the owner of the file
		3. S_IRGRP -- Read permission bit for the group owner of the file 
		4. S_IROTH -- Read permission bit for other users


	- If the file is successfully opened, the open function will return a nonnegative inetger representing the file descriptor. Otherwise, if it fails, it will return -1.  




---------------
|Closing Files|
---------------


	** An application using fopen to open a file must use fclose to close it ** 
	**    An application using open to open a file must close to close it 	 ** 


fclose
------

	int fclose(FILE *stream) ; 

	- It's common to abort the process or to truncate the file so its contents are meaningful when next read. 

	- If the main file function returns or if the exit function is called, all open files close and all output streams are flushed before program termination. 

		- Not all functions (such as abort) will close the files before the programs exit. 


Posix close
-----------

	int close(int filedes) 
		

	- On POSIX systems, you can use the close function to deallocate the file descriptor specified by filedes 
	
	- Once a file descriptor is closed, the file descriptor no longer exists. Files are also closed when the process owning that stream terminates. 

	



				

						-------------------------------------------
						| Reading and writing characters and lines|
						-------------------------------------------


- Most byte stream functions have counterparts that take a wide character (wchar_t) or wide character string instead of a narrow character (char) or string, respectively. Byte stream functions are declared in the header file <stdio.h>, and the wide stream functions in <wchar.h>


Narrow and Wide String I/O Functions
-------------------------------------

	char		wchar		Description
       -------	      ----------       --------------	
	fgetc		fgetwc		Reads a character from a stream 
	getc		getwc		Reads a character from a stream (often a macro) 
	getchar 	getwchar	Reads a character from stdin 
	fgets 		fgetws		Reads a line from a stream
	fputc		fputwc		Writes a character to a stream
	fputs		fputws		Writes a string to a stream	
	putchar		putwchar	Writes a character to stdout
	puts		N/A		Writes a string to stdout
	ungetc		ungetwc		Returns a character to a stream
	scanf		wscanf		Reads formatted character input from stdin
	fscanf		fwscanf		Reads formatted character input from a stream
	sscanf		swscanf		Reads formatted character input from a buffer
	printf		wprintf		Prints formatted character output to stdout
	fprintf		fwprintf	Prints formatted character output to a stream
	sprintf		swprintf	Prints formatted character output to a buffer
	snprintf	N/A		Same as sprintf with truncation. 



	- int fputc(int c, FILE *stream) ; 
		
		- fputc converts the character c to the type unsigned char and write it to a stream 
		- It returns EOF if a write error occursl otherwise it returns the character it has written 
	
	- int fputs(const char * restrict s, FILE * restrict stream) ; 

		- fputs writes the string s to the stream stream
		- Doesn't write the null character from string s nor does it write a newline character
		- If a write error occurs, fputs returns EOF, otherwise it will return a nonnegative integer 

		fputs("I ", stdout) ;
		fputs("am ", stdout) ; 
		fputs("Groot\n", stdout) ; 
		
		This reads "I am Groot" followed by newline 

	- int fgetc(FILE *stream) ; 
		
		- Reads the next character as an unsigned char from a stream and returns its value converted to an int
		- If an EOF or read erorr occurs, the function returns EOF
	

	
	- int fflush(FILE *stream) l
		
		- Delivers any unwritten data for a specified stream to the host environment to be written to the file. 







Expressions and Operators */
***************************/


	- ANTYHING OTHER THAN 0 IN C IS TRUE. ONLY 0 IS FALSE. 


Simple Assigmment
-----------------

	- Simple assignment replaces the value stored in the object designated by the left operand with the right operand 

		- int i = 21 ;  // declaration with initializer
		- int j = 7 ;   // declaration with initializer 
		- i = j ; 	// simple assignment

	- Declaration specify the type followed by the name
	- Initializations set the variable to a new instance (value) 

		- signed char c ; 
		- int i = INT_MAX ; 
		- long k ; 
		- k = (c = i) ;    
	
	- i is converted to signed char, then c is converted to long. 	

	

Evaluations
-----------

	- Value computation -- The calculation of the value that results from the evaluation of the expression. 

		- a[i] + f() + 9 
	
		- This expression takes three value computations in order to evaluate the entire expression. A value computation applied to a[i], a value computation applied to determine the return value of f(), and a third to evaluate the entire expression.

	- Side effects -- Accessing a volatile object, modifying an object, modifying a file, or calling a function that does any of those operations are all side effects, which are changes in the state of the execution environemnt.

	- Function designator -- An expression that has function type and is used to invoke a function. 

			- int x = 11 ;
			- int y = 21 ;
			- int max_of_x_and_y = max(x, y) ; // max is function designator 
		- A function passed as an argument to another function is implicitly converted to a function pointer. 
	

	- Prefix and Postfix Operator 
		- Prefix -- Comes before the operand and performs the increment before returning the value. 
		- Postfix -- Comes after the operand and returns the value and then performs the increment or decrement operation and then assigning the result. 

			- int i = 5 ; 
			- int e ;	
			- e = i++ ;  // e = 5 and i = 6 
			- e = i-- ;  // e = 6 and i = 5 
			- e = ++i ;  // e = 6 and i = 6 
			- e = --i ;  // e = 5 and i = 5 
	
	- When it comes to order of operation of the operands of any C operator, there is no set order in which things will be evaluated (this allows the compiler to be flexible and leaves more room for optimization). 	



Bitwise Operators
------------------

	- We use bitwise operators to manipulate the bits of an object or any integer expression. Typically they're used on objects that represent bitmaps: each bit indicates that somehting is "on" or "off", "enabled" or "disabled", or another binary pairing. 

	Types of Operators
        ------------------
	
		** All binary numbers in this example are unsigned! ** 


	 	1.  & (bitwise and) (binary) 

		7 --> 0 1 1 1
		4 --> 0 1 0 0	(0 & 0 = 1 ; 0 & 1 = 0 ; 1 & 1 = 1) 
		& <-- 0 1 0 0 
		7 & 4 = 4 (0010)

		2. | (bitwise or) (binary) 

		7 --> 0 1 1 1
		4 --> 0 1 0 0 
		| <-- 0 1 1 1 
		7 | 4 = 7 (0 1 1 1) 

		3. ~ (bitwise NOT) (unary)

		7 --> 0 1 1 1
		~ <-- 1 0 0 0
		~7 = 8 (1000)

		4. << (left shift) (unary)

		x = 7 ; 00000111 
		x = x<<1 ; 00001110 ; x = 14 
		x = x<<3 ; 01110000 ; x = 112 
		x = x<<2 ; 11000000 ; x = 192  	
		

		5. >> (right shift) (unary)
	
		x = 192 ; 11000000
		x=x>>1 ; 01100000 ; x = 96
		x=x>>2 ; 00011000 ; x = 24 
		x=x>>3 ; 00000011 ; x = 3 		


		6. ^  (xor) (binary) 

		A | B | A XOR B
		---------------
		0 | 0 | 0
		0 | 1 | 1 
		1 | 0 | 1
		1 | 1 | 1 


		7 --> 0 1 1 1
		4 --> 0 1 0 0
		7^4 <- 0 0 1 1
		7^4 = 3 (0011) 
	

Logical Operators
-----------------

	- && returns 1 if neither of its operands is equal to 0, and returns 0 otherwise. Logically a&&b == true if a = true and b = true

	- || returns 1 if either of its operands are not equal to 0 and returns 0 otherwise. a || b == true if a is true, b is true, or a and b are true.

	- Evaluation takes place right to left with logical operators. 
		- If the operation is something like a && b and a = 0 and b = 1, then the computer will stop evaluation if a = 0 since there is no answer b can hold that will make the expression true. 
		- On a similar note, if the expression is a || b and a = 1 and b = 0, then once a is evaluated, the entire expression will evaluate to true because there is no value b can hold that will make the expression false. 
	 	
	

Cast Operators
--------------

	- Casts (type casts) -- Explicitly convert a value of one type to a value of another type. 

	- double x = 1.2 ; 
	- int sum = (int)x + 1 ; // Explicit conversion from double to int

	** I need to know how the void cast works. **	




Conditional Operator
--------------------

		result = condition ? valueReturnedIfTrue : valueReturnedIfFalse

	- Conditional (?:) operator -- Returns a result based on the condition

	

Pointer Arithmetic 
-------------------

	- Adding or subtracting an expression that has integer type to or from a pointer returns a value with the type of the pointer operand. If the pointer operand points to an element of an array, then result points to an element offset from the original element. 

	
		int arr[100] ; 
		int *arrp1 = arr[40] ; 
		int *arrp2 = arrp1 + 20 ; //arrp2 points to arr[60] 
		printf("%td\n", arrp2-arrp1) ; //prints 20 





lvalues and rvalues
-------------------

	- lvalues -- Typically something on the lefthand side of the equals sign (not always). They are basically variables that have some type of storage backing them. 
 
		- lvalue references can only take in lvalues unless they are const. 

	- rvalue -- Something on the right hand side of the equal sign. These are temporary values. If there are no underlying objects to store the result, then it's an rvalue. 
		- rvalues references only take in temporary rvalues. 
	
	
			int i = 10 ; 
		
		- We have a variable i with an actual location in memory
		- Then we also have a value (10), which is a numeric literal, which has not storage and no location until it is stored in an lvalue.  
	
	- You can't store something in a rvalue. For example you can't say: 10 = i ; or 10 = int i ; etc. 

	 



Vocabulary
----------

	- Operator -- One or more punctuation characters used to perform an operation.

	- Expressions -- Sequences of operators and operands that compute a value or accomplish another purpose. Operands can be identifiers, constants, string literals, and other expressions. 

	- Variadic functions -- Functions that accept variable number of arguments (printf is an example). 


	- Interleave -- Instructions can be executed in any order provided the execution is sequentially consistent

	- Indeterminately sequenced -- Cannot interlave but can still be executed in any order.

	- Sequence Point -- A juncture at which all side effects will have completed.

	- Scalar Type -- Either an arithmetic type or pointer type.  

	- sizeof Operator -- Returns an unsigned integer of size_t that represents the size in bytes of its operands.i

	- Functions are pure if they produce the same result with the same inputs and the state is left unchanged?

	- 

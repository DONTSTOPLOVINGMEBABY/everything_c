Expressions and Operators */
***************************/


Simple Assigmment
-----------------

	- Simple assignment replaces the value stored in the object designated by the left operand with the right operand 

		- int i = 21 ;  // declaration with initializer
		- int j = 7 ;   // declaration with initializer 
		- i = j ; 	// simple assignment

	- Declaration specify the type followed by the name
	- Initializations set the variable to a new instance (value) 

		- signed char c ; 
		- int i = INT_MAX ; 
		- long k ; 
		- k = (c = i) ;    
	
	- i is converted to signed char, then c is converted to long. 	

	

Evaluations
-----------

	- Value computation -- The calculation of the value that results from the evaluation of the expression. 

		- a[i] + f() + 9 
	
		- This expression takes three value computations in order to evaluate the entire expression. A value computation applied to a[i], a value computation applied to determine the return value of f(), and a third to evaluate the entire expression.

	- Side effects -- Accessing a volatile object, modifying an object, modifying a file, or calling a function that does any of those operations are all side effects, which are changes in the state of the execution environemnt.

	- Function designator -- An expression that has function type and is used to invoke a function. 

			- int x = 11 ;
			- int y = 21 ;
			- int max_of_x_and_y = max(x, y) ; // max is function designator 
		- A function passed as an argument to another function is implicitly converted to a function pointer. 
	

	- Prefix and Postfix Operator 
		- Prefix -- Comes before the operand and performs the increment before returning the value. 
		- Postfix -- Comes after the operand and returns the value and then performs the increment or decrement operation and then assigning the result. 

			- int i = 5 ; 
			- int e ;	
			- e = i++ ;  // e = 5 and i = 6 
			- e = i-- ;  // e = 6 and i = 5 
			- e = ++i ;  // e = 6 and i = 6 
			- e = --i ;  // e = 5 and i = 5 
	
	- When it comes to order of operation of the operands of any C operator, there is no set order in which things will be evaluated (this allows the compiler to be flexible and leaves more room for optimization). 	




lvalues and rvalues
-------------------

	- lvalues -- Typically something on the lefthand side of the equals sign (not always). They are basically variables that have some type of storage backing them. 
 
		- lvalue references can only take in lvalues unless they are const. 

	- rvalue -- Something on the right hand side of the equal sign. These are temporary values. If there are no underlying objects to store the result, then it's an rvalue. 
		- rvalues references only take in temporary rvalues. 
	
	
			int i = 10 ; 
		
		- We have a variable i with an actual location in memory
		- Then we also have a value (10), which is a numeric literal, which has not storage and no location until it is stored in an lvalue.  
	
	- You can't store something in a rvalue. For example you can't say: 10 = i ; or 10 = int i ; etc. 

	 



Vocabulary
----------

	- Operator -- One or more punctuation characters used to perform an operation.

	- Expressions -- Sequences of operators and operands that compute a value or accomplish another purpose. Operands can be identifiers, constants, string literals, and other expressions. 

	- Variadic functions -- Functions that accept variable number of arguments (printf is an example). 






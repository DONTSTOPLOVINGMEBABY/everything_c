Dynamically Allocated Memory */
******************************/ 


Storage Duration
----------------

	- Objects occupy storage which might either be RAM, ROM, or registers. 
	
	- Objects of automatic storage duration are declared within a block or as a function parameter. The lifetime of these objects begin with the block that they're declared in begins execution and ends when each block ends. If the block is entered recursively, a new object is created each time with its own storage. 
	
	- Objects declared in file scope have static storage duration and the lifetime of the object is the entire execution of the program, and their stored value is initialized prior to program startup.
		- Objects not in file scope can be given static storage duration by the use of keyword static (similar to Global in python?) 


--------------------------------
| The Heap and Memory Managers | 
--------------------------------

	- Allocated Storage Duration -- Memory that is dynamically allocated has allocated storage duration. The lifetime of an allocated object extends from the allocation until the deallocation. Dynamically allocated memory is allocated from the heap. 
	
	- Heap -- One or more large, subdividable blocks of memory that are managed by memory managers. 

	- Memory managers -- Libraries that manage the heap for you by providing implementation of the standard memory management functions. The memory manager will request one or more blocks of memory from the operating system and then allocate this memory to the client process when it invokes a memory allocation function.

	- Fragmentation -- Occurs when memory is allocated and deallocated, resulting in many small blocks of memory but no remaining large blocks. As a result, larger allocation can fail even though the total amount of free memory is sufficient for the allocation. 


--------------------------------
When to Use Dyn Aloc. Memory
--------------------------------

	- You are suppose to use dynamically allocated memory when the exact storage requirements for a program are unkown before runtime. 

	- Dynamically allocated memory is less efficient than static or automatic memory because the manager needs to find appropriately sized blocks of memory in the runtime heap, and then the caller must explicitly free those blocks when no longer needed. 

	- Memory Leaks -- Occur when dynamically allocated memory that's no longer needed isn't returned to the memory manager. 




--------------------------------
Memory Management Functions
--------------------------------
	
	- C Functions for allocating and deallocating memory

		- Malloc
		- Aligned_alloc
		- calloc 
		- Realloc
		- free (deallocates memory) 
		


--------------------------------
	    Malloc
--------------------------------

	- Allocates space for an object of a specified size whose initial value is indeterminate. 

	- Malloc returns either a null pointer to indicate an error, or a pointer to the allocated space. 


<<<<<<< HEAD
	- void * p = malloc(size) ; 
	- char *p = malloc(size) ; 

		- The object referenced by p has no type until an object is copied into this storage. Once this occurs, the object has the effective type of the last object copied into this storage, which imprints the type onto the allocated object. 

		void *p = malloc(size) ; 
		widget w = {"abc", 9, 3.2} ; 
		memcpy(p, &w, sizeof(widget)) ; 
		



--------------------------------
	aligned_aloc
--------------------------------

	- void *aligned_alloc(size_t alignment, size_t size) ; 

	- Similar to the malloc function, except that it requires you to define an alignment as well as a size for the allocated object. 
	
	- You typically use it if you need to request a larger power of two. 

=======
--------------------------------
	Malloc
--------------------------------

    
	- void *realloc(void *ptr, size_t size) ;
 
	- realloc deallocates the old object pointed to by ptr and returns a pointer to new object that has the size specified by size. The contents of the new object is identical to that of the old object prior to deallocation, up to the lesser of the new and old sizes. Any bytes in the new object beyond the size of the old object have indeterminate values.  
>>>>>>> 53505304e17b18861e85628892d597b1b586a0d9




--------------------------------
	    calloc
--------------------------------


	- void *calloc(size_t nmemb, size_t size) 
	
	- The calloc function allocates storage for an array of nmemb objects, each of whose size is size bytes. 

	- The function will initialize storage to all zero-valued bytes. You can use calloc to assign storage for a single object, which can be thought of as an array of one element. 

	- Will return 





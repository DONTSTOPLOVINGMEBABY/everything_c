* OBJECTS, FUNCTIONS, AND TYPES */
*********************************/


- Every type in C is either an object type or a function type
- Pointers are types in C 
- Each object has a storage duration: The time during program execution for which the object exists, has storage, has a constant address, and retains its last-stored value. 

- Type definitions - You can use typedef to declare an alias for an existing type. 

		- typedef unsigned int uint_type -- uint_type becomes an alias for the type unsigned int
		- typedef signed char schar_type, *schar_p, (*fp)(void) ; -- schar_up = type signed char, *schar_p = signed char *, (*fp)(void) = signed char(*) (void). 

- Dereferencing a pointer means going to the address that the pointer holds and accessing that particular value. 




4 Types of Scope in C
----------------------

	1. File Scope -- If the identifier is not within the parameter list or block of a function, then the object's scope is the entire text file in which it appears as well as any files included after that point. 

	2. Block Scope -- If the declaration appears within the paramter list or inside the block (which means the identifier is only available locally within that block). 

	
	3. Function prototype scope -- Begins and ends within the function declarator.  

	
	4. Scopes can be nested with inner and outer scopes. The inner scope can access the outer scope but not vice versa.  




4 Types of Storage Duration for Objects in C
--------------------------------------------

	1. Automatic -- These objects are declared within a block or as a function parameter. They enter into memory when the block in which they're declared begins execution, and ends when execution of that block ends. If the block is entered recursively, a new object is created each time, each with its own storage. 

	2. Static Storage -- These objects are declared in file scope. Their lifetime is the entire execution of the program and their stored value is initialized prior to startup. A variable within a block canhave static storage duration by declaring it with the static specifier. Objects with the static identifier will be around even after that function has exited. 

	
	3. Thread Storage -- not covered by this book ;( 


	4. Allocated Storage -- Deals with dynamically allocated memory (discussed in chapter six ;)) 



Object Types in C (specifically Boolean, character, and numerical types: both integer and floating)
---------------------------------------------------------------------------------------------------

	1. _Bool - These types can only have a 0 or 1. If the header <stdbool.h> is included, you can just define the type with the keyword bool. 

	
	2. char, signed char, unsigned char -- All 3 are character types and will have the same alignment, size, range, representation, and behavior defined by the compiler. Char is not compatible with signed/unsigned char. The char type is used to represent character data. You can use signed char and unsigned char to represent small unsigned values. The wchar_t type can be used to represent characters from a wider array of languages/character sets.  

	
	3. Numerical -- Used to represent integers, enumerators, and floating point values. 

		a. Signed integer types can be used to represent negative numbers, positive numbers, and zero. Signed types include: signed char, short int, int, long int, and long long int. For every signed integer type, there is an unsigned integer type that allows for one more significant bit worth of storage. The types are ordered by width, which means that wider types are at least as large as narrower types so an integer of type long long int can represent all values that long int can. The int type typically has the natural size suggested by the architecture (16 bits, 32 bits, 64 bits, etc). 


		b. Enumeration or enum -- Allows you to define a type that assigns names (enumerators) to integer values in cases with an enumerable set of constant values. If a value isn't initially assigned to the first, then the value is 0 and each subsequent one is enumed by 1. You can use the = operator to assign enumeration constants with duplicate values. Be careful! 

			- enum day { sun, mon, tue, wed, thu, fri, sat } ; 
			- enum cardinal_points { north = 0, east = 90, south = 180, west = 270} ; 
			- enum months = { jan = 1, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec } ; 


		c. float, double, long double -- All of these are floating point. The C language suports the IEEE standard for floating point arithmetic on most systems. 

		
	
	4. Void -- The keyword "void" by itself means "cannot hold any value". It can be used to indicate that a function doesn't return a value or doesn't take an argument. The derived type void * means that the pointer can reference any object.


	
	5. Function Types -- Derived from the return type and the number and type of its parameters. 

			- int f(void) ;    // Function f takes no paramters and returns an int
			- int *fip() ; 	   // Function fip has no specified parameters and returns a pointer to int
			- void g(int i, int j);   // function g takes two paramters type int and returns type void
			- void h(int, int) ;  	  // function h takes two paramters type int and returns type void 

Derived Types
-------------

	- Derived types are types that are constructde from other types. 
		- Poitners, Arrays, Type Definitions, Structures, Unions


	1. Pointer Types - Pointer types are derived from the function or object type that it points to called the referenced type. 
		
			- int *ip;	// Pointer to int
			- char *cp; 	// Pointer to char
			- void *vp; 	// Pointer to void	

		- Address of operator & -- Takes the address of an object or function 
		- Indirection operator * -- Converts a pointer to a type into a value of that type. 

			- int i = 17; 	  // Declare object i of type int and assign value of 17 
			- int *ip = &i;   // Declare the object ip as a pointer to int and assign it the address of i 
			- ip = &*ip ; 	  // I have no clue what this does. 

 	
	2. Array type - A contiguosly allocated sequence of objects that all have the same element type. They are characterized by their element types and the number of elements in the array. 

			- int ia[11] ;	    // Array of 11 elements of type int identified by ia 	
			- float *afp[17] ;  // Array of 17 elements of type pointer to float identified by afp 
		
		- One way to determine the length of a character array is by taking the sizeof(the_array) / sizeof(the_array[0]) . Since arrays a sequence of objects that have the same type, you divide the total size of the array in bytes divided by the number of bytes that one element of the type takes up in memory. Using the first element of the array (array[0]) makes sure you calculate the size of the right type everytime.  
			
			*!* You don't have to do this for a character array. Since the length of each character type isone byte, then you would just be dividing sizeof(the_array) by 1. Therefore, you can simply find the length of the array in bytes by taking sizeof(the_array) . You can also just use strlen... *!* 
					



	3. Structure type - Contains sequentially allocated member objects, where each object has its own name and may have a distinct type. This is different from arrays, which must all have the same type. 


	4. Union Types - Unions are similar to structures, except that the memory used by the member objects overlaps. They can contain an object of one type at one time, and an object of a different type at a different time, but never both objects at the same time.

		- struct { int type ; int type2 } ; contains storage for both type and type2, while a union allows the same storage to be used for both its members. 



Type Qualifiers
---------------

	1. Const -- Const objects are not modifiable and are place in ROM by the compiler. Any attempt to write over them results in a runtime error. 

	
	2. Volatile -- The values in these objects may change without the knowledge of the compiler. Using a volatile qualified type lets the compiler know that the value may change, and ensures that every access to the input/output occurs and is not optimized away to hold a previously read or cached value. 

		- Every time the value from a real-time clock is read, it may change, even if the value has not been written to by the C program. 
		

			- volatile int port ;	// without volatile, the compiler may see this as  
			- port = port ; 	// a statement that does not thing and delete it.  

	3. Restrict -- Objects indirectly accessed through a pointer frequently cannot be fully optimized because more than one pointer may refer to the same objects.  



Definitions
-----------

- An object is "storage in which you can represent values"
	- Another definition: "A region of data storage in the execution environment, the contents of which can represent values... When referenced, an object can be interpreted as having a particular type"

- Address - "A location in memory where an object is stored"

- Automation Storage Duation -- "[Objects] exist until execution leaves the [code] block in which they're defined. 

- Parameters - "Objects declared as part of the function declaration that acquire a value on entry to the function"

- Arguments - "Comma separated expressions you include in the function call expression"

- Pass-by-value language - "When you provide an argument to a function, the value of that argument is copied into a distinct variable for use within the function"i

- Alignment - Represents the number of bytes between successive addresses at which a given object can be allocated. Stricter alignments have larger alignment values. An address that satisfies an alignment requirement also satisfies any weaker alignment requirement. 

